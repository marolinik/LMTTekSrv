version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: lmtek-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: lmtek_configurator
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lmtek-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: lmtek-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/lmtek_configurator?schema=public
      JWT_SECRET: your-super-secret-jwt-key-min-32-characters-long-for-production
      JWT_EXPIRES_IN: 7d
      PORT: 3001
      NODE_ENV: production
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost
      ADMIN_EMAIL: admin@lmtek.com
      ADMIN_PASSWORD: admin123
      ADMIN_NAME: System Administrator
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lmtek-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/components"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3001/api
        VITE_GEMINI_API_KEY: ${VITE_GEMINI_API_KEY}
    container_name: lmtek-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - lmtek-network
    environment:
      - VITE_API_URL=http://localhost:3001/api
      - VITE_GEMINI_API_KEY=${VITE_GEMINI_API_KEY}

volumes:
  postgres_data:
    driver: local

networks:
  lmtek-network:
    driver: bridge
